version: '3.8'

services:
  backend:
    build:
      context: ..
      dockerfile: docker/backend/Dockerfile
    ports:
      - "5001:5000"
    env_file:
      - .env
    environment:
      - NODE_ENV=production
      - PYTHONUNBUFFERED=1
      - API_KEY=your_api_key_here
      - ALLOWED_ORIGINS=["http://localhost:3000"]
      - RATE_LIMIT_REQUESTS=100
      - RATE_LIMIT_WINDOW=60
      - RAG_VECTOR_DB_PATH=/app/data/vector_db
      - RAG_CHUNK_SIZE=1000
      - RAG_CHUNK_OVERLAP=200
      - RAG_INDEX_UPDATE_INTERVAL=3600
      - LLM_MODEL=gpt-4
      - LLM_TEMPERATURE=0.7
      - LLM_MAX_TOKENS=2000
      - HOST=0.0.0.0
      - PORT=5000
      - DEBUG=false
      - LOG_LEVEL=INFO
      - CACHE_ENABLED=true
      - CACHE_TTL=3600
    volumes:
      - ${VAULT_PATH}:/app/vault
      - ./data:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy

  frontend:
    build:
      context: ..
      dockerfile: docker/frontend/Dockerfile
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=http://backend:5000
    depends_on:
      - backend

  redis:
    image: redis:alpine
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

volumes:
  redis_data:
    driver: local

networks:
  default:
    driver: bridge 